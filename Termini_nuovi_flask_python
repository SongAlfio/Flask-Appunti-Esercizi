from flask import Flask, render_template
app = Flask(__name__)

@app.route('/', methods=['GET'])
def hello_world():
    return render_template("index.html")
    
if __name__ == '__main__':
  app.run(host='0.0.0.0', port=3245, debug=True)
  
  
Il codice sopra è il base per funzionare un processo con flask
Il render_template ci porta in una pagina html, dentero possiamo anche portare dei elementi di python in html dichiarando la variabile.
Il nome della funzione non può essere uguale, neanche il route può essere uguale.


Questo è un esempio di come ricevere informazioni inviati dall'utente:
nome = request.args['Name']


Questo è un esempio di numero random in python:
import random      
n = random.randint(0, 8)     


Questo è un esempio di giorni in tempo reale:
from datetime import datetime
oggi = datetime.now()
vacanza = datetime(day=8, month=6, year=2022)
differenza = vacanza - oggi                      


Per fare una lista di dizionari possiamo fare così:
lista = []
lista.append({'name':nome, 'username':nome_utente, 'password':password, 'sex':sesso})


Questo codice ci fa un ciclo dentro una lista:
for Regione in range(len(geografia)):     


Questo è il codice per visualizzare bene la tabella di pandas in html:
url = "https://raw.githubusercontent.com/italia/covid19-opendata-vaccini/master/dati/platea-dose-addizionale-booster.csv"
df = pd.read_csv(url)
df.to_html(header="true", table_id="table")
@app.route('/', methods=['GET'])
def home():
    reg = df['nome_area'].drop_duplicates().to_list()
    return render_template("Form4.html",reg=reg)          
    

Questo è il codice per funzionare e per presentare matplotlib e geopandas:
from flask import Flask, render_template, send_file, make_response, url_for, Response, request, redirect
app = Flask(__name__)
import pandas as pd
import io
import geopandas as gpd
import contextily
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.figure import Figure
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt 
@app.route('/quartieri', methods=['GET'])
def quartieri1():

    fig, ax = plt.subplots(figsize = (12,8))

    Quartiere.to_crs(epsg=3857).plot(ax=ax, alpha=0.5)
    contextily.add_basemap(ax=ax)
    output = io.BytesIO()
    FigureCanvas(fig).print_png(output)
    return Response(output.getvalue(), mimetype='image/png')
    
if __name__ == '__main__':
  app.run(host='0.0.0.0', port=3245, debug=True)
  
  
Questo è il codice per visualizzare un grafico a barre:
@app.route('/grafico', methods=['GET'])
def grafico():
    fig, ax = plt.subplots(figsize = (6,4))

    x = Dataframe.Colonna1
    y = Dataframe.Colonna2

    ax.bar(x, y, color = "#304C89")
    plt.xticks(x)
       output = io.BytesIO()
    FigureCanvas(fig).print_png(output)
    return Response(output.getvalue(), mimetype='image/png')

per calcolare l'area di un geodataframe possiamo usare questo codice:
area = Provincia_Trovata.geometry.area.sum()/ 10**6


metttiamo il to__list() quando abbiamo una lista delle colonne da diventare una lista.
metttiamo il to__html() quando abbiamo una dataframe/geodataframe da diventare una pagina html.
redirect(url_for('numero')) usiamo per 重新定向
la parola chiave global serve a globare i variabili

